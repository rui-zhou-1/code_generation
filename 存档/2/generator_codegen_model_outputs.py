import os
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
from pathlib import Path
import re

class CodeGenGenerator:
    def __init__(self, model_path="/Data/public/codegen-6B-mono"):
        # 指定使用GPU号
        os.environ["CUDA_VISIBLE_DEVICES"] = "0"
        self.tokenizer = AutoTokenizer.from_pretrained(model_path)
        self.model = AutoModelForCausalLM.from_pretrained(model_path).cuda()
        
    def generate_code(self, prompt, max_length=512, temperature=0.7):
        input_ids = self.tokenizer(prompt, return_tensors="pt").input_ids.cuda()
        output = self.model.generate(
            input_ids,
            max_length=max_length,
            temperature=temperature,
            do_sample=True,
            top_p=0.9,
            pad_token_id=self.tokenizer.eos_token_id
        )
        return self.tokenizer.decode(output[0], skip_special_tokens=True)

def create_project(description, output_dir="generated_projects/codegen_project"):
    generator = CodeGenGenerator()
    project_dir = Path(output_dir)
    project_dir.mkdir(parents=True, exist_ok=True)
    
    print(f"\n{'='*50}")
    print(f"开始生成项目: {description}")
    print(f"{'='*50}\n")
    
    # 使用与codet5p相同的文件结构
    components = {
        "model.py": f"\"\"\"Neural network model implementation\nTask: {description}\"\"\"\n",
        "train.py": f"\"\"\"Training script\nTask: {description}\"\"\"\n",
        "dataset.py": "\"\"\"Data loading and preprocessing\"\"\"\n",
        "requirements.txt": "torch\ntorchvision\nnumpy\npandas"
    }
    
    # 生成各文件内容
    generated_code = {}
    for filename, header in components.items():
        print(f"\n{'='*30}")
        print(f"正在生成文件: {filename}")
        print(f"{'='*30}")
        
        if filename.endswith('.txt'):
            print(f"\n生成内容:\n{header}")
            with open(project_dir / filename, "w") as f:
                f.write(header)
            continue
            
        prompt = f"{header}\n# Implement this for a project that: {description}\n\n"
        print(f"\n生成提示(Prompt):\n{prompt}")
        
        code = generator.generate_code(prompt)
        # 后处理代码
        code = re.sub(r'""".*?"""', '', code, flags=re.DOTALL).strip()
        generated_code[filename] = code
        
        print(f"\n生成结果:\n{code}\n")
        print(f"{'='*30}\n")
        
        with open(project_dir / filename, "w") as f:
            f.write(code)
    
    # 建立与codet5p相同的文件关联
    with open(project_dir / "train.py", "a") as f:
        f.write("\n\nfrom model import *\nfrom dataset import *\n")
    
    # 生成相同格式的README
    readme_content = f"""# Generated by CodeGen\n\n## Project Description\n{description}\n\n## Files
- model.py: Model architecture
- train.py: Training pipeline
- dataset.py: Data processing
- requirements.txt: Dependencies
"""
    with open(project_dir / "README.md", "w") as f:
        f.write(readme_content)
    
    print(f"\n{'='*50}")
    print(f"项目生成完成!")
    print(f"保存路径: {project_dir.absolute()}")
    print(f"{'='*50}\n")

if __name__ == "__main__":
    description = input("Enter project description (e.g. '生成用于图像识别的代码'): ")
    create_project(description)