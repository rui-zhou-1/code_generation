import os
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
from pathlib import Path
import re

class CodeGenGenerator:
    def __init__(self, model_path="/Data/public/codegen-6B-mono"):
        # 指定使用GPU 号
        os.environ["CUDA_VISIBLE_DEVICES"] = "0"
        self.tokenizer = AutoTokenizer.from_pretrained(model_path)
        self.model = AutoModelForCausalLM.from_pretrained(model_path).cuda()
        
    def generate_code(self, prompt, max_length=512, temperature=0.7):
        input_ids = self.tokenizer(prompt, return_tensors="pt").input_ids.cuda()
        output = self.model.generate(
            input_ids,
            max_length=max_length,
            temperature=temperature,
            do_sample=True,
            top_p=0.9
        )
        return self.tokenizer.decode(output[0], skip_special_tokens=True)

def create_project(description, output_dir="generated_projects/codegen_project"):
    generator = CodeGenGenerator()
    project_dir = Path(output_dir)
    project_dir.mkdir(parents=True, exist_ok=True)
    
    # 生成不同功能的代码文件
    files = {
        "main.py": f"\"\"\"Main application file\nTask: {description}\"\"\"\n",
        "utils.py": "\"\"\"Utility functions\"\"\"\n",
        "config.py": "\"\"\"Configuration settings\"\"\"\n"
    }
    
    # 生成文件内容并建立关联
    generated_code = {}
    for filename, header in files.items():
        prompt = f"{header}\n# Implement this file for a project that: {description}\n\n"
        code = generator.generate_code(prompt)
        # 后处理：移除可能的重复提示
        code = re.sub(r'""".*?"""', '', code, flags=re.DOTALL).strip()
        generated_code[filename] = code
        with open(project_dir / filename, "w") as f:
            f.write(code)
    
    # 确保文件间有导入关系
    with open(project_dir / "main.py", "a") as f:
        f.write("\n\nfrom utils import *\nfrom config import *\n")
    
    # 生成README
    readme_content = f"""# Generated by CodeGen\n\n## Project Description\n{description}\n\n## Files
- main.py: Main application logic
- utils.py: Helper functions
- config.py: Configuration settings
"""
    with open(project_dir / "README.md", "w") as f:
        f.write(readme_content)
    
    print(f"CodeGen project generated at: {project_dir.absolute()}")

if __name__ == "__main__":
    description = input("Enter project description (e.g. '生成用于图像识别的代码'): ")
    create_project(description)