### linear_regression_model.py
```python
"""
LinearRegressionModel
A class for implementing and training a linear regression model.
"""

import numpy as np

class LinearRegressionModel:
    """
    Linear regression model class.

    Methods:
        fit(X, y): Fit the model according to the given training data.
        predict(X): Predict using the linear model.
    """

    def __init__(self):
        self.coef_ = None
        self.intercept_ = None

    def fit(self, X, y):
        """
        Fit the model according to the given training data.

        Parameters:
            X (np.ndarray): Training vector of shape (n_samples, n_features).
            y (np.ndarray): Target values of shape (n_samples,).

        Returns:
            self (object): Trained LinearRegressionModel instance.
        """
        X_b = np.c_[np.ones((X.shape[0], 1)), X]
        theta_best = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)
        self.coef_ = theta_best[1:]
        self.intercept_ = theta_best[0]

    def predict(self, X):
        """
        Predict using the linear model.

        Parameters:
            X (np.ndarray): Samples of shape (n_samples, n_features).

        Returns:
            y_pred (np.ndarray): Predicted values for samples in X.
        """
        X_b = np.c_[np.ones((X.shape[0], 1)), X]
        return X_b.dot(self.coef_) + self.intercept_
```

### utils.py
```python
"""
Utility functions for data processing and evaluation.
"""

def load_data(file_path):
    """
    Load data from a CSV file.

    Parameters:
        file_path (str): Path to the CSV file.

    Returns:
        X (np.ndarray): Feature matrix.
        y (np.ndarray): Target vector.
    """
    data = np.loadtxt(file_path, delimiter=',')
    X = data[:, :-1]
    y = data[:, -1]
    return X, y
```

### main.py
```python
"""
Main entry point for running experiments with the linear regression model.
"""

import linear_regression_model
import utils

def run_exp():
    """
    Run an experiment with the linear regression model.

    This function loads the dataset, trains the model, and evaluates its performance.
    """
    X, y = utils.load_data('data.csv')

    model = linear_regression_model.LinearRegressionModel()
    model.fit(X, y)

    # Example prediction (not implemented)
    print("Coefficients:", model.coef_)
    print("Intercept:", model.intercept_)

def eval():
    """
    Evaluate the model's performance on a separate test set.
    """
    # Placeholder for evaluation logic
    pass

if __name__ == "__main__":
    run_exp()
```

### requirements.txt
```
numpy
```